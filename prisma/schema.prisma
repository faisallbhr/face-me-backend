generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id           Int            @id @default(autoincrement())
    name         String
    username     String         @unique
    email        String         @unique
    password     String
    image        String?
    post         Post[]
    like         LikesOnPosts[]
    comment      Comment[]
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    Token        Token[]
    RefreshToken RefreshToken[]
}

model Token {
    id        Int      @id @default(autoincrement())
    user      User     @relation(fields: [userId], references: [id])
    userId    Int      @unique
    token     String
    expires   DateTime
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model RefreshToken {
    id        Int      @id @default(autoincrement())
    user      User     @relation(fields: [userId], references: [id])
    userId    Int      @unique
    token     String
    expires   DateTime
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Post {
    id        String         @id @default(cuid())
    userId    Int
    user      User           @relation(fields: [userId], references: [id])
    body      String
    image     String?
    like      LikesOnPosts[]
    comment   Comment[]
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt
}

model LikesOnPosts {
    post   Post   @relation(fields: [postId], references: [id])
    postId String
    user   User   @relation(fields: [userId], references: [id])
    userId Int

    @@id([postId, userId])
}

model Comment {
    id        Int       @id @default(autoincrement())
    content   String
    user      User      @relation(fields: [userId], references: [id])
    userId    Int
    post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId    String
    parent    Comment?  @relation("ChildComments", fields: [parentId], references: [id], onDelete: Cascade)
    parentId  Int?
    children  Comment[] @relation("ChildComments")
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    @@index([userId], name: "user_id_index")
    @@index([postId], name: "post_id_index")
    @@index([parentId], name: "parent_id_index")
}
